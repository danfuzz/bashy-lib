#!/bin/bash
# Copyright 2022-2025 the Bashy-lib Authors (Dan Bornstein et alia).
# SPDX-License-Identifier: Apache-2.0

[[ "$(readlink -f "$0")" =~ ^(.*/tests/) ]] && . "${BASH_REMATCH[1]}_init.sh" || exit 1


#
# Argument parsing
#

opt-value --var=what what
opt-alias absolute --what=absolute
opt-alias not-set  --what=not-set
opt-alias relative --what=relative

process-args "$@" || exit "$?"


#
# Helper functions
#

function do-absolute {
    subproject-dir --set="$(this-cmd-dir)" || return "$?"
    call-all
}

function do-not-set {
    # These should all fail before the subproject is set.

    if subproject-dir; then
        error-msg '`subproject-dir` did not fail.'
    fi

    if subproject-subdir; then
        error-msg '`subproject-subdir` did not fail.'
    fi

    if subproject-name; then
        error-msg '`subproject-name` did not fail.'
    fi
}

function do-relative {
    subproject-dir --set=.. || return "$?"
    call-all
}

function report {
    local cmd="$1"

    local result
    result="$("${cmd}")" || return "$?"

    if [[ ${result} =~ ^(.*)"${prefix}"(.*)$ ]]; then
        result="${BASH_REMATCH[1]}<base>${BASH_REMATCH[2]}"
    fi

    printf '%s: %s\n' "${cmd}" "${result}"
}

function call-all {
    # These should all succeed if the subproject was set.
    echo 'Trying all subproject getters...'

    true \
    && report subproject-dir \
    && report subproject-subdir \
    && report subproject-name \
    || return "$?"

    echo ''
    echo 'Done!'
}


#
# Main script
#

# Prefix to elide in results.
prefix="${BASH_SOURCE[0]}"
[[ ${prefix} =~ ^(.*/bashy-lib) ]] || {
    error-msg 'Could not figure out prefix!'
    exit 1
}
prefix="${BASH_REMATCH[1]}"

do-"${what}"
